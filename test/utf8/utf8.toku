/// UTF-8 file

print("testing UTF-8 library");

local utf8 = import("utf8");


local fn checkerror(msg, f, ...) {
    local s, err = pcall(f, ...);
    assert(!s and reg.find(err, msg));
}


local fn len(s) {
    return __G.len(reg.gsub(s, "[\x80-\xBF]", ""));
}


local justone = "^" .. utf8.charpattern .. "$";

/// 'l' is the list of codepoints of 's'
local fn checksyntax(s, l) {
    /// creates a string "return '\u{l[1]}...\u{l[n]}'"
    local ls = ["return \""];
    foreach i in range(0, l.len)
        ls[i+1] = string.fmt("\\u{%x}", l[i]);
    ls[l.len + 1] = "\";";
    ls = list.concat(ls);
    /// its execution should result in 's'
    assert(assert(load(ls))() == s);
}

assert(!utf8.offset("alo", 5));
assert(!utf8.offset("alo", -4));

/// 'check' makes several tests over the validity of string 's'.
/// 'l' is the list of codepoints of 's'.
local fn check(s, l, nonstrict) {
    local n = utf8.len(s, 0, -1, nonstrict);
    assert(l.len == n and len(s) == n);
    assert(utf8.char(list.flatten(l)) == s); /// 'l' and 's' are equivalent

    assert(utf8.offset(s, 0) == 0);

    checksyntax(s, l);

    /// creates new list with all codepoints of 's'
    local l1 = [utf8.codepoint(s, 0, __G.len(s) > 0 and -1 or nil, nonstrict)];
    assert(l.len == l1.len);
    for local i=0; i<l.len; i=i+1;
        assert(l[i] == l1[i]); /// 'l' is equal to 'l1'

    for local i=0; i<n; i=i+1; { /// for all codepoints
        local pi, pie = utf8.offset(s, i+1); /// position of i-th char
        local pi1 = utf8.offset(s, 2, pi); /// position of next char
        if !pi1 { /* last codepoint? */
            assert(i == n-1);
            assert(pie + 1 == n);
            assert(reg.find(string.substr(s, pi, pi1), justone));
            assert(1 == __G.len(utf8.char(utf8.codepoint(s, pi, pi, nonstrict))));
            local off1, off2 = utf8.offset(s, 0, pi);
            assert(off1 == pi and off2 == pi);
        } else {
            assert(pi1 == pie + 1);
            assert(reg.find(string.substr(s, pi, pi1-1), justone));
            assert(pi1 - pi == __G.len(utf8.char(utf8.codepoint(s, pi, pi, nonstrict))));
            for local j=pi; j<=pi1-1; j=j+1; {
                local off1, off2 = utf8.offset(s, 0, j);
                assert(off1 == pi and off2 == pi1 - 1);
            }
            for (local j=pi+1; j<pi1; j=j+1)
                assert(!utf8.len(s, j));
            assert(utf8.len(s, pi, pi1 - 1, nonstrict) == 1);
            assert(utf8.len(s, pi1, -1, nonstrict) == n - i - 1);
        }
        assert(utf8.offset(s, -1, pi1) == pi);
        assert(utf8.offset(s, i - n) == pi);
        assert(utf8.len(s, pi, pi, nonstrict) == 1);
        assert(utf8.len(s, pi, -1, nonstrict) == n - i);
        assert(utf8.len(s, 0, pi, nonstrict) == i + 1);
    }

    local expected = 0; /// expected position of "current" character
    for local i=1; i<n+1; i=i+1; {
        local p, e = utf8.offset(s, i);
        assert(p == expected);
        expected = e + 1;
    }
    assert(expected == __G.len(s));

    local i = 0;
    foreach p, c in utf8.codes(s, nonstrict) {
        i = i+1;
        assert(c == l[i-1] and p == utf8.offset(s, i));
        assert(utf8.codepoint(s, p, p, nonstrict) == c);
    }
    assert(i == l.len);

    i = 0;
    foreach c in reg.gmatch(s, utf8.charpattern) {
        i = i + 1;
        assert(c == utf8.char(l[i-1]));
    }
    assert(i == l.len);

    for (local i=1; i<=n; i=i+1)
        assert(utf8.offset(s, i) == utf8.offset(s, i - n - 1, __G.len(s)));
}


{ /// error indication in utf8.len
    local fn checklen(s, p)  {
        local a, b = utf8.len(s);
        assert(!a and b == p);
    }
    checklen("abc\xE3def", 3);
    checklen("\xF4\x9F\xBF", 0);
    checklen("\xF4\x9F\xBF\xBF", 0);
    /// spurious continuation bytes
    checklen("汉字\x80", __G.len("汉字"));
    checklen("\x80hello", 0);
    checklen("hel\x80lo", 3);
    checklen("汉字\xBF", __G.len("汉字"));
    checklen("\xBFhello", 0);
    checklen("hel\xBFlo", 3);
}

/// errors in utf8.codes
{
    local fn errorcodes(s) {
        checkerror("invalid UTF%-8 code", fn() {
            foreach c, code in utf8.codes(s)
                assert(c);
        });
    }
    errorcodes("ab\xff");
    errorcodes("\u{110000}");
    errorcodes("in\x80valid");
    errorcodes("\xbfinvalid");
    errorcodes("αλφ\xBFα");

  /// calling iteration fn with invalid arguments
    local f = utf8.codes("");
    assert(f("", 2) == nil);
    assert(f("", -1) == nil);
    assert(f("", math.minint) == nil);
}

{ /// error in initial position for offset
    checkerror("position out of bounds", utf8.offset, "abc", 1, 4);
    checkerror("position out of bounds", utf8.offset, "abc", 1, -4);
    checkerror("position out of bounds", utf8.offset, "", 1, 1);
    checkerror("position out of bounds", utf8.offset, "", 1, -1);
    checkerror("continuation byte", utf8.offset, "𦧺", 1, 1);
    checkerror("continuation byte", utf8.offset, "𦧺", 1, 1);
    checkerror("continuation byte", utf8.offset, "\x80", 1);
}

{ /// error in indices for len
    checkerror("out of bounds", utf8.len, "abc", 0, 3);
}


local s = "hello World";
local l = [string.byte(s, 0, -1)];
for local i=0; i<utf8.len(s); i=i+1;
    assert(l[i] == string.byte(s, i));
check(s, l);

check("汉字/漢字", [27721, 23383, 47, 28450, 23383]);
{
    local s = "áéí\128";
    local l = [utf8.codepoint(s,0,__G.len(s) - 2)];
    assert(l.len == 3 and l[0] == 225 and l[1] == 233 and l[2] == 237);
    checkerror("invalid UTF%-8 code", utf8.codepoint, s, 1, len(s));
    checkerror("out of bounds", utf8.codepoint, s, __G.len(s));
    l = [utf8.codepoint(s, 3, 2)];
    assert(l.len == 0);
    checkerror("out of bounds", utf8.codepoint, s, -(__G.len(s) + 1), 0);
    checkerror("out of bounds", utf8.codepoint, s, 0, __G.len(s));
    /// surrogates
    assert(utf8.codepoint("\u{D7FF}") == 0xD800 - 1);
    assert(utf8.codepoint("\u{E000}") == 0xDFFF + 1);
    assert(utf8.codepoint("\u{D800}", 0, 0, true) == 0xD800);
    assert(utf8.codepoint("\u{DFFF}", 0, 0, true) == 0xDFFF);
    assert(utf8.codepoint("\u{7FFFFFFF}", 0, 0, true) == 0x7FFFFFFF);
}

assert(utf8.char() == "");
assert(utf8.char(0, 97, 98, 99, 1) == "\0abc\1");

assert(utf8.codepoint(utf8.char(0x10FFFF)) == 0x10FFFF);
assert(utf8.codepoint(utf8.char(0x7FFFFFFF), 0, 0, true) == (1<<31) - 1);

checkerror("value out of range", utf8.char, 0x7FFFFFFF + 1);
checkerror("value out of range", utf8.char, -1);

local fn invalid(s) {
    checkerror("invalid UTF%-8 code", utf8.codepoint, s);
    assert(!utf8.len(s));
}

/// UTF-8 representation for 0x11ffff (value out of valid range)
invalid("\xF4\x9F\xBF\xBF");

/// surrogates
invalid("\u{D800}");
invalid("\u{DFFF}");

/// overlong sequences
invalid("\xC0\x80");            /// zero
invalid("\xC1\xBF");            /// 0x7F (should be coded in 1 byte)
invalid("\xE0\x9F\xBF");        /// 0x7FF (should be coded in 2 bytes)
invalid("\xF0\x8F\xBF\xBF");    /// 0xFFFF (should be coded in 3 bytes)


/// invalid bytes
invalid("\x80");    /// continuation byte
invalid("\xBF");    /// continuation byte
invalid("\xFE");    /// invalid byte
invalid("\xFF");    /// invalid byte


/// empty string
check("", []);

/// minimum and maximum values for each sequence size
s = "\0 \x7F\xC2\x80 \xDF\xBF\xE0\xA0\x80 \xEF\xBF\xBF\xF0\x90\x80\x80  \xF4\x8F\xBF\xBF";
s = reg.gsub(s, " ", "");
check(s, [0,0x7F, 0x80,0x7FF, 0x800,0xFFFF, 0x10000,0x10FFFF]);

{
    /// original UTF-8 values
    local s = "\u{4000000}\u{7FFFFFFF}";
    assert(__G.len(s) == 12);
    check(s, [0x4000000, 0x7FFFFFFF], true);

    s = "\u{200000}\u{3FFFFFF}";
    assert(__G.len(s) == 10);
    check(s, [0x200000, 0x3FFFFFF], true);

    s = "\u{10000}\u{1fffff}";
    assert(__G.len(s) == 8);
    check(s, [0x10000, 0x1FFFFF], true);
}

local x = "日本語a-4\0éó";
check(x, [26085, 26412, 35486, 97, 45, 52, 0, 233, 243]);


{ /// Supplementary Characters
    check("𣲷𠜎𠱓𡁻𠵼ab𠺢",
            [0x23CB7, 0x2070E, 0x20C53, 0x2107B, 0x20D7C, 0x61, 0x62, 0x20EA2,]);

    check("𨳊𩶘𦧺𨳒𥄫𤓓\xF4\x8F\xBF\xBF",
            [0x28CCA, 0x29D98, 0x269FA, 0x28CD2, 0x2512B, 0x244D3, 0x10ffff]);


    local i = 0;
    foreach p, c in reg.gmatch(x, "()(" .. utf8.charpattern .. ")") {
        i = i + 1;
        assert(utf8.offset(x, i) == p);
        assert(utf8.len(x, p) == utf8.len(x) - i + 1);
        assert(utf8.len(c) == 1);
        local lim = __G["len"](c) - 1;
        for local j=1; j<=lim; j=j+1;
            assert(utf8.offset(x, 0, p + j - 1) == p);
    }
}
