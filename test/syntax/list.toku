local l = [];
assert(l);
# set some indices
l[0] = 1;
assert(l.len == 1);
l[1] = 3;
assert(l.len == 2);
l[2] = 5;
assert(l.len == 3);
assert(l[0] == 1);
assert(l[1] == 3);
assert(l[2] == 5);
assert(l[3] == nil);
assert(l[-5] == nil);
# new list from constructor
l = [
    15,
    15.2,
    13,
    [69, 69, 69],
];
assert(l[0] == 15);
assert(l[1] == 15.2);
assert(l[2] == 13);
assert(l[3][0] == 69);
assert(l[3][1] == 69);
assert(l[3][2] == 69);
assert(l[3][3] == nil);
assert(l[4] == nil and l[-1] == nil); # out of bounds access
assert(l.len == 4 and l["len"] == 4);
l[l.len] = 1;
assert(l.len == 5 and l["len"] == 5 and len(l) == 5);
assert(l.x == 15);
assert(l.y == 15.2);
assert(l.z == 13);
l.x = 12; assert(l.x == 12);
l.y = 12.2; assert(l.y == 12.2);
l.z = [69, 28, 29]; assert(l.z == l[2]);
assert(l.z.x == 69);
assert(l.z.y == 28);
assert(l.z.z == 29);
l[l.len] = {};
assert(l.last == l[l.len - 1] and l.last == l[5]);
l.last = l.x;
assert(l.last == l.x and l.last == l[0] and l[5] == l[0] and l.last == 12);
l = [];
assert(l.last == nil);
assert(l.x == nil and l.y == nil and l.z == nil);
assert(l[-1] == nil and l[-25] == nil);
l.last = 5;
assert(l.len == 1 and l.last == 5);

/// only first 3 indices should be set
l = [2, 3, 4, nil, 5, 6];
assert(l.len == 3);
assert(l.x == 2 and l.y == 3 and l.z == 4 and l[3] == nil);
