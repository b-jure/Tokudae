local db = import("debug");
local getinfo = db.getinfo;

{ /// inactive Tokudae function
    local g; /// 'f' second upvalue
    /// comment
    local fn f(x, y, z) {
        g = nil;
        foreach i in range(0, 500)
            x = i + z / y;
    /// inactive line
        return x;
    }

    local t = getinfo(f); /// default
    assert(string.find(t.source, "getinfo.toku") and string.find(t.shortsrc, "getinfo.toku"));
    assert(t.defline == 7 and t.lastdefline == 13 and t.what == "Tokudae");
    assert(t.currline == -1);
    assert(t.nupvals == 2 and t.nparams == 3 and t.isvararg == false);
    assert(t.name == nil and t.namewhat == "");
    assert(t.ftransfer == 0 and t.ntransfer == 0); 
    assert(t.activelines == nil);
    assert(t.func == f);

    t = getinfo(f, "s"); /// get source information
    assert(string.find(t.source, "getinfo.toku") and string.find(t.shortsrc, "getinfo.toku"));
    assert(t.defline == 7 and t.lastdefline == 13 and t.what == "Tokudae");
    t = getinfo(f, "l"); /// get line
    assert(t.currline == -1);
    t = getinfo(f, "u"); /// get upvalues and isvararg
    assert(t.nupvals == 2 and t.nparams == 3 and t.isvararg == false);
    t = getinfo(f, "n"); /// get name
    assert(t.name == nil and t.namewhat == "");
    t = getinfo(f, "r"); /// get return transfers
    assert(t.ftransfer == 0 and t.ntransfer == 0); 
    t = getinfo(f, "f"); /// get function
    assert(t.func == f);
    t = getinfo(f, "L"); /// get active lines
    foreach k,v in assert(fields(t.activelines)) {
        switch (k) {
            case 8: case 9: case 10: case 12: break;
            default: assert(nil, "unreachable; invalid active line number");
        }
        assert(v == true);
    }

    local fn checkerr(msg, f, ...) {
        local r, err = pcall(f, ...);
        assert(!r and string.find(err, msg));
    }

    /// {function} arg errors
    checkerr("number expected", getinfo, nil);
    checkerr("number expected", getinfo, false);
    checkerr("number expected", getinfo, true);
    checkerr("number expected", getinfo, []);
    checkerr("number expected", getinfo, {});
    checkerr("number expected", getinfo, class{});
    checkerr("number expected", getinfo, (class{})());
    checkerr("no integer representation", getinfo, 0.15);
    /// invalid option errors
    checkerr("invalid option", getinfo, f, "Z");
    checkerr("invalid option '>'", getinfo, f, ">");
}

{ /// active Tokudae functions
    local t = getinfo(1);
    assert(string.find(t.source, "getinfo.toku") and string.find(t.shortsrc, "getinfo.toku"));
    assert(t.defline == 0 and t.lastdefline == 0 and t.what == "main");
    assert(t.currline == 67);
    assert(t.nupvals == 1 and t.nparams == 0 and t.isvararg == true);
    assert(t.name == nil and t.namewhat == "");
    assert(t.ftransfer == 0 and t.ntransfer == 0); 
    assert(t.activelines == nil);
    assert(t.func == getinfo(1, "f").func);

    t = getinfo(1, "L");
    local max = 0;
    foreach k,v in fields(t.activelines)
        max = max > k and max or k;
    assert(max >= 65); /// at least this many active lines
    if !__opts or (__opts and __opts.run_isolated)
        assert(getinfo(3) == nil); /// level out of range
    else
        (Message or print)("skipped traceback size test for active Tokudae function");
}

local Cprint = (__c and __c.print) or print;

{ /// inactive C function
    local t = getinfo(Cprint);
    assert(string.find(t.source, "[C]") and string.find(t.shortsrc, "[C]"));
    assert(t.defline == -1 and t.lastdefline == -1 and t.what == "C");
    assert(t.currline == -1);
    assert(t.nupvals == 0 and t.nparams == 0 and t.isvararg == true);
    assert(t.name == nil and t.namewhat == "");
    assert(t.ftransfer == 0 and t.ntransfer == 0); 
    assert(t.activelines == nil and getinfo(Cprint, "L").activelines == nil);
    assert(t.func == Cprint);
}


{ /// active C function
    local t = getinfo(2);
    assert(string.find(t.source, "[C]") and string.find(t.shortsrc, "[C]"));
    assert(t.defline == -1 and t.lastdefline == -1 and t.what == "C");
    assert(t.currline == -1);
    assert(t.nupvals == 0 and t.nparams == 0 and t.isvararg == true);
    assert(t.name == nil and t.namewhat == "");
    assert(t.ftransfer == 0 and t.ntransfer == 0); 
    assert(t.activelines == nil and getinfo(Cprint, "L").activelines == nil);
    assert(t.func == getinfo(2, "f").func);
}
