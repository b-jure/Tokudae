local s = "This is a test string, used for testing, get it?";

local l = string.rsplit(s, " ");
assert(len(l) == 10);
assert(l[0] == "it?");
assert(l[1] == "get");
assert(l[2] == "testing,");
assert(l[3] == "for");
assert(l[4] == "used");
assert(l[5] == "string,");
assert(l[6] == "test");
assert(l[7] == "a");
assert(l[8] == "is");
assert(l[9] == "This");

l = string.rsplit(s);
assert(len(l) == 10);
assert(l[0] == "it?");
assert(l[1] == "get");
assert(l[2] == "testing,");
assert(l[3] == "for");
assert(l[4] == "used");
assert(l[5] == "string,");
assert(l[6] == "test");
assert(l[7] == "a");
assert(l[8] == "is");
assert(l[9] == "This");

l = string.rsplit(s, " ", 4);
assert(len(l) == 5);
assert(l[0] == "it?");
assert(l[1] == "get");
assert(l[2] == "testing,");
assert(l[3] == "for");
assert(l[4] == "This is a test string, used");

l = string.rsplit(s, "");
assert(len(l) == 1);
assert(l[0] == s);
l = string.rsplit(s, "", 1);
assert(len(l) == 1);
assert(l[0] == s);
l = string.rsplit(s, "", 0);
assert(len(l) == 1);
assert(l[0] == s);
l = string.rsplit(s, "", -1);
assert(len(l) == 1);
assert(l[0] == s);

l = string.rsplit("   Skip   whitespace  ");
assert(len(l) == 2);
assert(l[0] == "whitespace");
assert(l[1] == "Skip");

l = string.rsplit("A   Skip   whitespace  ");
assert(len(l) == 3);
assert(l[0] == "whitespace");
assert(l[1] == "Skip");
assert(l[2] == "A");

l = string.rsplit("   Skip   whitespace  ", nil, 2);
assert(len(l) == 2);
assert(l[0] == "whitespace");
assert(l[1] == "Skip");

l = string.rsplit("   Skip   whitespace  ", nil, 1);
assert(len(l) == 2);
assert(l[0] == "whitespace");
assert(l[1] == "   Skip");

l = string.rsplit("   Skip   whitespace  ", nil, 0);
assert(len(l) == 1);
assert(l[0] == "   Skip   whitespace");

l = string.rsplit("A   Skip   whitespace  ", nil, 1);
assert(len(l) == 2);
assert(l[0] == "whitespace");
assert(l[1] == "A   Skip");

l = string.rsplit("           ", nil);
assert(len(l) == 0);

l = string.rsplit("", nil, 2);
assert(len(l) == 0);
