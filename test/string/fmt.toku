local fn checkerror(msg, f, ...) {
    local s, err = pcall(f, ...);
    assert(!s and string.find(err, msg));
}

local fn topointer(s) {
    return string.fmt("%p", s);
}


{ /*
   ** Tests for '%p' format.
   ** Not much to test, as C does not specify what '%p' does.
   ** ("The value of the pointer is converted to a sequence of printing
   ** characters, in an implementation-defined manner.")
   */ 
    local null = "(null)";  # nulls are formatted by Tokudae
    assert(string.fmt("%p", 4) == null);
    assert(string.fmt("%p", inf) == null);
    assert(string.fmt("%p", infinity) == null);
    assert(string.fmt("%p", -inf) == null);
    assert(string.fmt("%p", -infinity) == null);
    assert(string.fmt("%p", true) == null);
    assert(string.fmt("%p", false) == null);
    assert(string.fmt("%p", nil) == null);
    assert(string.fmt("%p", {}) != null);
    assert(string.fmt("%p", []) != null);
    assert(string.fmt("%p", class {}) != null);
    assert(string.fmt("%p", fn (){}) != null);
    assert(string.fmt("%p", print) != null);
    assert(string.fmt("%p", topointer) != null);
    assert(string.fmt("%p", print) == string.fmt("%p", print));
    assert(string.fmt("%p", print) != string.fmt("%p", assert));

    assert(len(string.fmt("%90p", {})) == 90);
    assert(len(string.fmt("%-60p", {})) == 60);
    assert(string.fmt("%10p", false) == string.repeat(" ", 10-len(null)) .. null);
    assert(string.fmt("%-12p", 1.5) == null .. string.repeat(" ", 12-len(null)));

    {
        local t1 = {}; local t2 = {};
        assert(topointer(t1) != topointer(t2));
    }

    { # short strings are internalized
        local s1 = string.repeat("a", 10);
        local s2 = string.repeat("aa", 5);
        assert(topointer(s1) == topointer(s2));
    }

    { # long strings aren't internalized
        local s1 = string.repeat("a", 300); local s2 = string.repeat("a", 300);
        assert(topointer(s1) != topointer(s2));
    }
}

{
    local x = "\"ílo\"\n\\";
    assert(string.fmt("%q%s", x, x) == "\"\\\"ílo\\\"\\\n\\\\\"\"ílo\"\n\\");
    assert(string.fmt("%q", "\0") == "\"\\0\"");
    assert(load(string.fmt("return %q;", x))() == x);
    x = "\0\1\0023\5\0009";
    assert(load(string.fmt("return %q;", x))() == x);
    assert(string.fmt("\0%c\0%c%x\0", '\xe4', 'b', 140) == "\0\xe4\0b8c\0");
    assert(string.fmt("") == "");
    assert(string.fmt("%c",34)..string.fmt("%c",48)..string.fmt("%c",90)..string.fmt("%c",100)
            == string.fmt("%1c%-c%-1c%c", 34, 48, 90, 100));
    assert(string.fmt("%s\0 is not \0%s", "not be", "be") == "not be\0 is not \0be");
    assert(string.fmt("%%%d %010d", 10, 23) == "%10 0000000023");
    assert(tonum(string.fmt("%f", 10.3)) == 10.3);
    assert(string.fmt("\"%-50s\"", "a") == "\"a" .. string.repeat(" ", 49) .. "\"");

    assert(string.fmt("-%.20s.20s", string.repeat("%", 2000)) ==
            "-"..string.repeat("%", 20)..".20s");
    assert(string.fmt("\"-%20s.20s\"", string.repeat("%", 2000)) ==
            string.fmt("%q", "-"..string.repeat("%", 2000)..".20s"));

    {
        local fn checkQ(v) {
            local s = string.fmt("%q", v);
            local nv = load("return " .. s .. ";")();
            assert(v == nv);
        }
        checkQ("\0\0\1\255\u{234}");
        checkQ(inf);
        checkQ(-inf);
        checkQ(0.1);
        checkQ(true);
        checkQ(nil);
        checkQ(false);
        assert(string.fmt("%q", 0/0) == "(0/0)");   # NaN
        checkerror("no literal", string.fmt, "%q", {});
    }

    assert(string.fmt("\0%s\0", "\0\0\1") == "\0\0\0\1\0");
    checkerror("contains zeros", string.fmt, "%10s", "\0");
}


# format x tostr
assert(string.fmt("%s %s", nil, true) == "nil true");
assert(string.fmt("%s %.4s", false, true) == "false true");
assert(string.fmt("%.3s %.3s", false, true) == "fal tru");
assert(string.fmt("%x", 0.0) == "0");
assert(string.fmt("%02x", 0.0) == "00");
assert(string.fmt("%08X", 0xFFFFFFFF) == "FFFFFFFF");
assert(string.fmt("%+08d", 31501) == "+0031501");
assert(string.fmt("%+08d", -30927) == "-0030927");


{ # longest number that can be formatted
    local i = 1;
    local j = 10000;
    while (i + 1 < j) {   # binary search for maximum finite float
        local m = (i + j) // 2;
        if (10**m < inf)
            i = m;
        else
            j = m;
    }
    assert(10**i < inf and 10**j == inf);
    local s = string.fmt("%.99f", -(10**i));
    assert(len(s) >= i + 101);
    assert(tonum(s) == -(10**i));

    # limit for floats;
    assert(10**38 < inf);
    s = string.fmt("%.99f", -(10**38));
    assert(len(s) >= 38 + 101);
    assert(tonum(s) == -(10**38));
}


# testing large numbers for format
{ # assume at least 32 bits (no overflows)
    local max, min = 0x7fffffff, -0x80000000;      # "large" for 32 bits
    assert(string.substr(string.fmt("%8x", -1), -8) == "ffffffff");
    assert(string.fmt("%x", max) == "7fffffff");
    assert(string.substr(string.fmt("%x", min), -8) == "80000000");
    assert(string.fmt("%d", max) ==  "2147483647");
    assert(string.fmt("%d", min) == "-2147483648");
    assert(string.fmt("%u", 0xffffffff) == "4294967295");
    assert(string.fmt("%o", 0xABCD) == "125715");

    max, min = 0x7fffffffffffffff, -0x8000000000000000;
    if (max > 2.0**53) { # only for 64 bits
        assert(string.fmt("%x", (2**52 | 0) - 1) == "fffffffffffff");
        assert(string.fmt("0x%8X", 0x8f000003) == "0x8F000003");
        assert(string.fmt("%d", 2**53) == "9007199254740992");
        assert(string.fmt("%i", -2**53) == "-9007199254740992");
        assert(string.fmt("%x", max) == "7fffffffffffffff");
        assert(string.fmt("%x", min) == "8000000000000000");
        assert(string.fmt("%d", max) ==  "9223372036854775807");
        assert(string.fmt("%d", min) == "-9223372036854775808");
        assert(string.fmt("%u", ~(-1 << 64)) == "18446744073709551615");
        assert(tostr(1234567890123) == "1234567890123");
    }
}


{ # testing format %a %A
    local fn matchhexa(n) {
        local s = string.fmt("%a", n);
        assert(tonum(s) == n);
        s = string.fmt("%A", n);
        assert(tonum(s) == n);
    }
    foreach _, n in indices([0.1, -0.1, 1/3, -1/3, 1e30, -1e30,
                            -45/247, 1, -1, 2, -2, 3e-20, -3e-20])
        matchhexa(n);

    # test inf, -inf, NaN, and -0.0
    assert(string.find(string.fmt("%a", 1/0), "inf"));
    assert(string.find(string.fmt("%A", -1/0), "-INF"));
    assert(string.find(string.fmt("%a", 0/0), "nan"));
    assert(string.find(string.fmt("%a", -0.0), "-0x0"));
}


# testing some flags (all these results are required by ISO C)
assert(string.fmt("%#12o", 10) == "         012");
assert(string.fmt("%#10x", 100) == "      0x64");
assert(string.fmt("%#-17X", 100) == "0X64             ");
assert(string.fmt("%013i", -100) == "-000000000100");
assert(string.fmt("%2.5d", -100) == "-00100");
assert(string.fmt("%.u", 0) == "");
assert(string.fmt("%+#014.0f", 100) == "+000000000100.");
assert(string.fmt("%-16c", 97) == "a               ");
assert(string.fmt("%+.3G", 1.5) == "+1.5");
assert(string.fmt("%.0s", "alo")  == "");
assert(string.fmt("%.s", "alo")  == "");


# errors in format

local fn check(fmt, msg) {
    checkerror(msg, string.fmt, fmt, 10);
}

local aux = string.repeat("0", 600);
check("%100.3d", "invalid conversion");
check("%1"..aux..".3d", "too long");
check("%1.100d", "invalid conversion");
check("%10.1"..aux.."004d", "too long");
check("%t", "invalid conversion");
check("%"..aux.."d", "too long");
check("%d %d", "missing format value");
check("%010c", "invalid conversion");
check("%.10c", "invalid conversion");
check("%0.34s", "invalid conversion");
check("%#i", "invalid conversion");
check("%3.1p", "invalid conversion");
check("%0.s", "invalid conversion");
check("%10q", "cannot have modifiers");
check("%F", "invalid conversion");
