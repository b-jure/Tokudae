local x, y, z = getargs(1, 5, 6, 7);
assert(x == 6 and y == 7 and z == nil);
x, y, z = getargs(-2, 5, 6, 7);
assert(x == 6 and y == 7 and z == nil);

local args = [ 1, 2, "ok" ];
x = getargs("list", list.flatten(args));
assert(x and typeof(x) == "list" and len(x) == 3);
assert(x[0] == 1 and x[1] == 2 and x[2] == "ok" and x[3] == undef);

x = getargs("table", list.flatten(args));
assert(x and typeof(x) == "table" and len(x) == 3);
assert(x[args[0]] == true and x[args[1]] == true and x[args[2]] == true);

assert(getargs(0) == nil);
x, y = getargs(0);
assert(!x and !y);

assert(getargs("len", list.flatten(args)) == 3);
assert(getargs("len") == 0);

assert(getargs("last", list.flatten(args)) == "ok");
assert(getargs("last") == nil);

local fn checkerr(msg, f, ...) {
    local st, err = pcall(f, ...);
    assert(!st and string.find(err, msg));
}

checkerr("number expected", getargs, nil);
checkerr("invalid mode", getargs, "bla");
checkerr("out of range", getargs, -4, args);
checkerr("out of range", getargs, -1);
checkerr("out of range", getargs, 1);
