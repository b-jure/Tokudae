local l = [0, 69, 420, 1337, 133742069, 1337, 420, 69, 0];
foreach i, v in indices(l) {
    switch (i) {
        case 0: assert(v == 0); break;
        case 1: assert(v == 69); break;
        case 2: assert(v == 420); break;
        case 3: assert(v == 1337); break;
        case 4: assert(v == 133742069); break;
        case 5: assert(v == 1337); break;
        case 6: assert(v == 420); break;
        case 7: assert(v == 69); break;
        case 8: assert(v == 0); break;
        default: assert(false); break;
    }
}

local class MyList {
    __init = || {
        self.list = [5, 5, 10, 15, 25, 40, 65];
        return self;
    };
    __indices = || {
        fn iter(self, i) {
            if typeof(self) != "instance" or getclass(self) != MyList
                error("expected instance of MyList");
            i++;
            if (i >= self.list.len)
                return nil;
            else
                return i, self.list[i];
        }
        return iter, self, -1;
    };
}
l = MyList();
local j = 0;
foreach i,v in indices(l) j++;
assert(j == l.list.len);

local iter, state, index = indices(l);
local st, err = pcall(iter, [], index);
assert(!st and string.find(err, "instance of MyList"));
st, err = pcall(iter, (class{})(), index);
assert(!st and string.find(err, "instance of MyList"));
