local minint <final> = math.minint;
local maxint <final> = math.maxint;
local intbits <final> = math.floor(math.log(math.maxint, 2) + 0.5) + 1;

# test 'math.maxint' and 'math.minint'
assert((1 << intbits) == 0);
assert(minint == 1 << (intbits - 1));
assert(maxint == minint - 1);
assert(minint < minint + 1);
assert(maxint - 1 < maxint);
assert(0 - minint == minint);
assert(minint * minint == 0);
assert(maxint * maxint * maxint == maxint);


# test 'math.huge' and 'inf'
assert(math.huge > 10e30);
assert(-math.huge < -10e30);
assert(inf <= math.huge);
assert(-inf <= math.huge);
assert(-math.huge <= inf);
assert(-math.huge <= -inf);


# number of bits in the mantissa of a floating-point number
local floatbits = 24;
{
    local p = 2.0**floatbits;
    while (p < p + 1.0) {
        p = p * 2.0;
        floatbits = floatbits + 1;
    }
}


# maximum exponent for a floating-point number
local maxexp = 0;
{
    local p = 2.0;
    while (p < math.huge) {
        maxexp = maxexp + 1;
        p = p + p;
    }
}


local fn isnan(x) {
    return (x != x);
}


assert(isnan(0/0));
assert(!isnan(1/0));


{
    local x = 2.0**floatbits;
    assert(x > x - 1.0 and x == x + 1.0);
}


local fn checkerror(msg, f, ...) {
    local s, err = pcall(f, ...);
    assert(!s and string.find(err, msg));
}

local msgf2i = "has no integer representation";

# float equality
local fn eq(a,b,limit) {
    if (!limit ) {
        if (floatbits >= 50) limit = 1E-11;
        else limit = 1E-5;
    }
    # a == b needed for +inf/-inf
    return (a == b or math.abs(a-b) <= limit);
}


# value and type equality
local fn eqt(x,y) {
    return a == b and math.type(a) == math.type(b);
}


# basic float notation
assert(0e12 == 0 and .0 == 0 and 0. == 0 and .2e2 == 20 and 2.E-1 == 0.2);

{
    local a,b,c = "2", " 3e0 ", " 10  ";
    assert(tonum(a)+tonum(b) == 5);
    assert(-tonum(b) == -3 and tonum(b)+tonum("2") == 5);
    assert(tonum("10")-tonum(c) == 0);
    assert(typeof(a) == "string" and typeof(b) == "string" and typeof(c) == "string");
    assert(a == "2" and b == " 3e0 " and c == " 10  ");
    assert(-tonum(c) == -tonum("  10 "));
    assert(tonum(c)%tonum(a) == 0 and tonum(a)**tonum(b) == 8);
    a = 0;
    assert(a == -a and 0 == -0);
}

{
    local x = -1;
    local mz = 0/x; # minus zero
    local a = [10, 20, 30, 40, 50];
    assert(a[mz] == a[0] and a[-0] == a[0]);
}


# testing floor division and conversions
foreach _, i in indices([-16, -15, -3, -2, -1, 0, 1, 2, 3, 15]) {
    foreach _, j in indices([-16, -15, -3, -2, -1, 1, 2, 3, 15]) {
        foreach _, ai in indices([0, 0.0]) {     # try 'i' as int and as float
            foreach _, aj in indices([0, 0.0]) { # try 'j' as int and as float
                local x = i + ai;
                local y = j + aj;
                assert(i//j == math.floor(i/j));
            }
        }
    }
}
assert(1//0.0 == 1/0);
assert(-1 // 0.0 == -1/0);
assert(eqt(3.5 // 1.5, 2.0));
assert(eqt(3.5 // -1.5, -3.0));


{ # tests for different kinds of opcodes
    local x, y;
    x = 1; assert(x // 0.0 == 1/0);
    x = 1.0; assert(x // 0 == 1/0);
    x = 3.5; assert(eqt(x // 1, 3.0));
    assert(eqt(x // -1, -4.0));
    x = 3.5; y = 1.5; assert(eqt(x // y, 2.0));
    x = 3.5; y = -1.5; assert(eqt(x // y, -3.0));
}

assert(maxint // maxint == 1);
assert(maxint // 1 == maxint);
assert((maxint - 1) // maxint == 0);
assert(maxint // (maxint - 1) == 1);
assert(minint // minint == 1);
assert(minint // minint == 1);
assert((minint + 1) // minint == 0);
assert(minint // (minint + 1) == 1);
assert(minint // 1 == minint);
assert(minint // -1 == -minint);
assert(minint // -2 == 2**(intbits - 2));
assert(maxint // -1 == -maxint);

 
{ # negative exponents
    assert(2**-3 == 1 / 2**3);
    assert(eq((-3)**-3, 1 / (-3)**3));
    for (local i = -3; i < 4; i = i + 1) # variables avoid constant folding
        for (local j = -3; j < 4; j = j + 1)
            if (i != 0 or j > 0) # domain errors (0**(-n)) are not portable
                assert(eq(i**j, 1 / i**(-j)));
}


# comparison between floats and integers (border cases)
if (floatbits < intbits) {
    assert(2.0**floatbits == (1 << floatbits));
    assert(2.0**floatbits - 1.0 == (1 << floatbits) - 1.0);
    assert(2.0**floatbits - 1.0 != (1 << floatbits));
    # float is rounded, int is not
    assert(2.0**floatbits + 1.0 != (1 << floatbits) + 1);
} else { # floats can express all integers with full accuracy
    assert(maxint == maxint + 0.0);
    assert(maxint - 1 == maxint - 1.0);
    assert(minint + 1 == minint + 1.0);
    assert(maxint != maxint - 1.0);
}
assert(maxint + 0.0 == 2.0**(intbits - 1) - 1.0);
assert(minint + 0.0 == minint);
assert(minint + 0.0 == -2.0**(intbits - 1));


# order between floats and integers
assert(1 < 1.1); assert(!(1 < 0.9));
assert(1 <= 1.1); assert(!(1 <= 0.9));
assert(-1 < -0.9); assert(!(-1 < -1.1));
assert(1 <= 1.1); assert(!(-1 <= -1.1));
assert(-1 < -0.9); assert(!(-1 < -1.1));
assert(-1 <= -0.9); assert(!(-1 <= -1.1));
assert(minint <= minint + 0.0);
assert(minint + 0.0 <= minint);
assert(!(minint < minint + 0.0));
assert(!(minint + 0.0 < minint));
assert(maxint < minint * -1.0);
assert(maxint <= minint * -1.0);
{
    local fmaxi1 = 2**(intbits - 1);
    assert(maxint < fmaxi1);
    assert(maxint <= fmaxi1);
    assert(!(fmaxi1 <= maxint));
    assert(minint <= -2**(intbits - 1));
    assert(-2**(intbits - 1) <= minint);
}

if (floatbits < intbits) {
    local fmax = 2**floatbits;
    local ifmax = fmax | 0;
    assert(fmax < ifmax + 1);
    assert(fmax - 1 < ifmax);
    assert(-(fmax - 1) > -ifmax);
    assert(!(fmax <= ifmax - 1));
    assert(-fmax > -(ifmax + 1));
    assert(!(-fmax >= -(ifmax - 1)));
    assert(fmax/2 - 0.5 < ifmax//2);
    assert(-(fmax/2 - 0.5) > -ifmax//2);
    assert(maxint < 2**intbits);
    assert(minint > -2**intbits);
    assert(maxint <= 2**intbits);
    assert(minint >= -2**intbits);
} else {
    assert(maxint < maxint + 1.0);
    assert(maxint < maxint + 0.5);
    assert(maxint - 1.0 < maxint);
    assert(maxint - 0.5 < maxint);
    assert(!(maxint + 0.0 < maxint));
    assert(maxint + 0.0 <= maxint);
    assert(!(maxint < maxint + 0.0));
    assert(maxint + 0.0 <= maxint);
    assert(maxint <= maxint + 0.0);
    assert(!(maxint + 1.0 <= maxint));
    assert(!(maxint + 0.5 <= maxint));
    assert(!(maxint <= maxint - 1.0));
    assert(!(maxint <= maxint - 0.5));
    assert(minint < minint + 1.0);
    assert(minint < minint + 0.5);
    assert(minint <= minint + 0.5);
    assert(minint - 1.0 < minint);
    assert(minint - 1.0 <= minint);
    assert(!(minint + 0.0 < minint));
    assert(!(minint + 0.5 < minint));
    assert(!(minint < minint + 0.0));
    assert(minint + 0.0 <= minint);
    assert(minint <= minint + 0.0);
    assert(!(minint + 1.0 <= minint));
    assert(!(minint + 0.5 <= minint));
    assert(!(minint <= minint - 1.0));
}

{
    local NaN <final> = 0/0;
    assert(!(NaN < 0));
    assert(!(NaN > minint));
    assert(!(NaN <= -9));
    assert(!(NaN <= maxint));
    assert(!(NaN < maxint));
    assert(!(minint <= NaN));
    assert(!(minint < NaN));
    assert(!(4 <= NaN));
    assert(!(4 < NaN));
}

# avoiding errors at compile time
local fn checkcompt(msg, code) {
    local x = load(code);
    assert(x);
    checkerror(msg, x);
}
checkcompt("divide by zero", "return 2 // 0;");
checkcompt(msgf2i, "return 2.3 >> 0;");
checkcompt(msgf2i, string.fmt("return 2.0**%d & 1;", intbits - 1));
checkcompt(msgf2i, "return math.huge << 1;");
checkcompt(msgf2i, string.fmt("return 1 | 2.0**%d;", intbits - 1));
checkcompt(msgf2i, "return 2.3^0.0;");

# testing overflow errors when converting from float to integer (runtime)
local fn f2i(x) { return x|x; }
checkerror(msgf2i, f2i, math.huge);     # +inf
checkerror(msgf2i, f2i, -math.huge);    # -inf
checkerror(msgf2i, f2i, 0/0);           # NaN

if (floatbits < intbits) {
    # conversion tests when float cannot represent all integers
    assert(maxint + 1.0 == maxint + 0.0);
    assert(minint - 1.0 == minint + 0.0);
    checkerror(msgf2i, f2i, maxint + 0.0);
    assert(f2i(2.0**(intbits - 2)) == 1 << (intbits - 2));
    assert(f2i(-2.0**(intbits - 2)) == -(1 << (intbits - 2)));
    assert((2.0**(floatbits - 1) + 1.0) // 1 == (1 << (floatbits - 1)) + 1);
    # maximum integer representable as a float
    local mf = maxint - (1 << (floatbits - intbits)) + 1;
    assert(f2i(mf + 0.0) == mf);  # OK up to here
    mf = mf + 1;
    assert(f2i(mf + 0.0) != mf);  # no more representable
} else {
    # conversion tests when float can represent all integers
    assert(maxint + 1.0 > maxint);
    assert(minint - 1.0 < minint);
    assert(f2i(maxint + 0.0) == maxint);
    checkerror("no integer rep", f2i, maxint + 1.0);
    checkerror("no integer rep", f2i, minint - 1.0);
}

# 'minint' should be representable as a float no matter the precision
assert(f2i(minint + 0.0) == minint);


# testing numeric strings
assert(tonum("2") + 1 == 3);
assert(tonum("2 ") + 1 == 3);
assert(tonum(" -2 ") + 1 == -1);
assert(tonum(" -0xa ") + 1 == -9);


# literal integer overflows
{
    # no overflows
    assert(eqt(tonum(tostr(maxint)), maxint));
    assert(eqt(tonum(tostr(minint)), minint));

    # large numbers
    assert(eqt(tonum("1"..string.repeat("0", 30)), 1e30));
    assert(eqt(tonum("-1"..string.repeat("0", 30)), -1e30));

    # hexa format still wraps around
    assert(eqt(tonum("0x1"..string.repeat("0", 30)), 0));

    # lexer in the limits
    assert(minint == load("return " .. tostr(minint) .. ";")());
    assert(eqt(maxint, load("return " .. tostr(maxint) .. ";")()));

    assert(eqt(10000000000000000000000.0, 10000000000000000000000));
    assert(eqt(-10000000000000000000000.0, -10000000000000000000000));
}


# testing 'tonum'

# 'tonum' with numbers
assert(tonum(3.4) == 3.4);
assert(eqt(tonum(3), 3));
assert(eqt(tonum(maxint), maxint) and eqt(tonum(minint), minint));
assert(tonum(1/0) == 1/0);

# 'tonum' with strings
assert(tonum("0") == 0);
assert(!tonum(""));
assert(!tonum("  "));
assert(!tonum("-"));
assert(!tonum("  -0x "));
assert(!tonum({}));
assert(tonum("+0.01") == 1/100 and tonum("+.01") == 0.01 and
       tonum(".01") == 0.01 and tonum("-1.") == -1 and
       tonum("+1.") == 1);
assert(!tonum("+ 0.01") and !tonum("+.e1") and
       !tonum("1e") and !tonum("1.0e+") and
       !tonum("."));
assert(tonum("-012") == -010-2);
assert(tonum("-1.2e2") == - - -120);

assert(tonum("0xffffffffffff") == (1 << (4*12)) - 1);
assert(tonum("0x"..string.repeat("f", (intbits//4))) == -1);
assert(tonum("-0x"..string.repeat("f", (intbits//4))) == 1);

# testing 'tonum' with base
assert(tonum("  001010  ", 2) == 10);
assert(tonum("  001010  ", 10) == 1010);
assert(tonum("  -1010  ", 2) == -10);
assert(tonum("10", 36) == 36);
assert(tonum("  -10  ", 36) == -36);
assert(tonum("  +1Z  ", 36) == 36 + 35);
assert(tonum("  -1z  ", 36) == -36 + -35);
assert(tonum("-fFfa", 16) == -(10+(16*(15+(16*(15+(16*15)))))));
assert(tonum(string.repeat("1", (intbits - 2)), 2) + 1 == 2**(intbits - 2));
assert(tonum("ffffFFFF", 16)+1 == (1 << 32));
assert(tonum("0ffffFFFF", 16)+1 == (1 << 32));
assert(tonum("-0ffffffFFFF", 16) - 1 == -(1 << 40));
for (local i = 2; i <= 36; i = i + 1) {
    local i2 = i * i;
    local i10 = i2 * i2 * i2 * i2 * i2;   # i**10
    assert(tonum("\t10000000000\t", i) == i10);
}

# tests with very long numerals
assert(tonum("0x"..string.repeat("f", 13)..".0") == 2.0**(4*13) - 1);
assert(tonum("0x"..string.repeat("f", 150)..".0") == 2.0**(4*150) - 1);
assert(tonum("0x"..string.repeat("f", 300)..".0") == 2.0**(4*300) - 1);
assert(tonum("0x"..string.repeat("f", 500)..".0") == 2.0**(4*500) - 1);
assert(tonum("0x3." .. string.repeat("0", 1000)) == 3);
assert(tonum("0x" .. string.repeat("0", 1000) .. "a") == 10);
assert(tonum("0x0." .. string.repeat("0", 13).."1") == 2.0**(-4*14));
assert(tonum("0x0." .. string.repeat("0", 150).."1") == 2.0**(-4*151));
assert(tonum("0x0." .. string.repeat("0", 300).."1") == 2.0**(-4*301));
assert(tonum("0x0." .. string.repeat("0", 500).."1") == 2.0**(-4*501));
assert(tonum("0xe03" .. string.repeat("0", 1000) .. "p-4000") == 3587.0);
assert(tonum("0x." .. string.repeat("0", 1000) .. "74p4004") == 0x7.4p0);

assert(tonum("inf"));
assert(tonum("infinity"));
assert(tonum(" INF "));
assert(tonum(" INFINITY "));
assert(tonum(" INFinity "));
assert(!tonum("Nan"));
assert(!tonum("NaN"));
assert(!tonum("NAN"));
assert(!tonum("nAn"));
assert(!tonum("nAN"));

# testing 'tonum' for invalid formats
local fn f(...) {
    if (getargs("len", ...) == 1)
        return (...);
    else
        return "***";
}

assert(!f(tonum("e  1")));
assert(!f(tonum("fFfa", 15)));
assert(!f(tonum("099", 8)));
assert(!f(tonum("1\0", 2)));
assert(!f(tonum("", 8)));
assert(!f(tonum("  ", 9)));
assert(!f(tonum("  ", 9)));
assert(!f(tonum("0xf", 10)));
assert(!f(tonum("  ")));
assert(!f(tonum("")));
assert(!f(tonum("1  a")));
assert(!f(tonum("1  a", 2)));
assert(!f(tonum("1\0")));
assert(!f(tonum("1 \0")));
assert(!f(tonum("1\0 ")));
assert(!f(tonum("e1")));
assert(!f(tonum(" 3.4.5 ")));

# testing 'tonum' for invalid hexadecimal formats
assert(!tonum("0x"));
assert(!tonum("x"));
assert(!tonum("x3"));
assert(!tonum("0x3.3.3"));  # two decimal points
assert(!tonum("00x2"));
assert(!tonum("0x 2"));
assert(!tonum("0 x2"));
assert(!tonum("23x"));
assert(!tonum("- 0xaa"));
assert(!tonum("-0xaaP "));  # no exponent
assert(!tonum("0x0.51p"));
assert(!tonum("0x5p+-2"));


# testing hexadecimal numerals
assert(0x10 == 16 and 0xfff == 2**12 - 1 and 0XFB == 251);
assert(0x0p12 == 0 and 0x.0p-3 == 0);
assert(0xFFFFFFFF == (1 << 32) - 1);
assert(tonum("+0x2") == 2);
assert(tonum("-0xaA") == -170);
assert(tonum("-0xffFFFfff") == -(1 << 32) + 1);

# possible confusion with decimal exponent
assert(0E+1 == 0 and 0xE+1 == 15 and 0xe-1 == 13);

# floating hexas
assert(tonum("  0x2.5p0  ") == 0x25/16);
assert(tonum("  -0x2.5p0  ") == -0x25/16);
assert(tonum("  +0x0.51p+8  ") == 0x51);
assert(0x.FfffFFFFp0 == 1 - tonum("0x.00000001p0"));
assert(tonum("0xA.aP0") + 0 == 10 + 10/16);
assert(0xa.aP4 == 0XAA);
assert(0x4P-2 == 1);
assert(0x1.1p0 == tonum("0x1.P0") + tonum("+0x.1p0"));
assert(0Xabcdef.0P0 == 0x.ABCDEFp+24);
assert(1.1 == 1.+.1);
assert(100.0 == 1E2 and .01 == 1e-2);
assert(1111111111 - 1111111110 == 1000.00e-03);
assert(1.1 == tonum("1.") + tonum(".1"));
assert(tonum("1111111111") - tonum("1111111110") ==
       tonum("  +0.001e+3 \n\t"));
assert(0.1e-30 > 0.9E-31 and 0.9E30 < 0.1e31);
assert(0.123456 > 0.123455);
assert(tonum("+1.23E18") == 1.23*10.0**18);


# testing order operators
assert(!(1<1) and (1<2) and !(2<1));
assert(!("a"<"a") and ("a"<"b") and !("b"<"a"));
assert(!('a'<'a') and ('a'<'b') and !('b'<'a'));
assert((1<=1) and (1<=2) and !(2<=1));
assert(("a"<="a") and ("a"<="b") and !("b"<="a"));
assert(('a'<='a') and ('a'<='b') and !('b'<='a'));
assert(!(1>1) and !(1>2) and (2>1));
assert(!("a">"a") and !("a">"b") and ("b">"a"));
assert(!('a'>'a') and !('a'>'b') and ('b'>'a'));
assert((1>=1) and !(1>=2) and (2>=1));
assert(("a">="a") and !("a">="b") and ("b">="a"));
assert(('a'>='a') and !('a'>='b') and ('b'>='a'));
assert(1.3 < 1.4 and 1.3 <= 1.4 and !(1.3 < 1.3) and 1.3 <= 1.3);


# testing mod operator
assert(eqt(-4 % 3, 2));
assert(eqt(4 % -3, -2));
assert(eqt(-4.0 % 3, 2.0));
assert(eqt(4 % -3.0, -2.0));
assert(eqt(4 % -5, -1));
assert(eqt(4 % -5.0, -1.0));
assert(eqt(4 % 5, 4));
assert(eqt(4 % 5.0, 4.0));
assert(eqt(-4 % -5, -4));
assert(eqt(-4 % -5.0, -4.0));
assert(eqt(-4 % 5, 1));
assert(eqt(-4 % 5.0, 1.0));
assert(eqt(4.25 % 4, 0.25));
assert(eqt(10.0 % 2, 0.0));
assert(eqt(-10.0 % 2, 0.0));
assert(eqt(-10.0 % -2, 0.0));
assert(math.pi - math.pi % 1 == 3);
assert(math.pi - math.pi % 0.001 == 3.141);

{ # very small numbers
    local i, j = 0, 20000;
    while (i < j) {
        local m = (i + j) // 2;
        if (10**-m > 0)
            i = m + 1;
        else
            j = m;
    }
    # 'i' is the smallest possible ten-exponent
    local b = 10**-(i - (i // 10));    # a very small number
        assert(b > 0 and b * b == 0);
    local delta = b / 1000;
    assert(eq((2.1 * b) % (2 * b), (0.1 * b), delta));
    assert(eq((-2.1 * b) % (2 * b), (2 * b) - (0.1 * b), delta));
    assert(eq((2.1 * b) % (-2 * b), (0.1 * b) - (2 * b), delta));
    assert(eq((-2.1 * b) % (-2 * b), (-0.1 * b), delta));
}

# basic consistency between integer modulo and float modulo
for (local i = -10; i <= 10; i = i + 1)
    for (local j = -10; j <= 10; j = j + 1)
        if (j != 0)
            assert((i + 0.0) % j == i % j);

for (local i = 0; i <= 10; i = i + 1)
    for (local j = -10; j <= 10; j = j + 1)
        if (j != 0)
            assert((2**i) % j == (1 << i) % j);

{ # precision of module for large numbers
    local i = 10;
    while ((1 << i) > 0) {
        assert((1 << i) % 3 == i % 2 + 1);
        i = i + 1;
    }

    i = 10;
    while (2**i < math.huge) {
        assert(2**i % 3 == i % 2 + 1);
        i = i + 1;
    }
}

assert(eqt(minint % minint, 0));
assert(eqt(maxint % maxint, 0));
assert((minint + 1) % minint == minint + 1);
assert((maxint - 1) % maxint == maxint - 1);
assert(minint % maxint == maxint - 1);

assert(minint % -1 == 0);
assert(minint % -2 == 0);
assert(maxint % -2 == -1);


assert(tonum(" 1.3e-2 ") == 1.3e-2);
assert(tonum(" -1.00000000000001 ") == -1.00000000000001);

/* 
** Testing constant limits
** 2^23 = 8388608
*/
assert(8388609 + -8388609 == 0);
assert(8388608 + -8388608 == 0);
assert(8388607 + -8388607 == 0);


{ # testing -0 and NaN
    local mz <final> = -0.0;
    local z <final> = 0.0;
    assert(mz == z);
    assert(1/mz < 0 and 0 < 1/z);
    local a = {[mz] = 1};
    assert(a[z] == 1 and a[mz] == 1);
    a[z] = 2;
    assert(a[z] == 2 and a[mz] == 2);
    {
        local mz <final> = -1/inf;
        local z <final> = 1/inf;
        assert(mz == z);
        assert(1/mz < 0 and 0 < 1/z);
    }
    local NaN <final> = inf - inf;
    assert(NaN != NaN);
    assert(!(NaN < NaN));
    assert(!(NaN <= NaN));
    assert(!(NaN > NaN));
    assert(!(NaN >= NaN));
    assert(!(0 < NaN) and !(NaN < 0));
    local NaN1 <final> = 0/0;
    assert(NaN != NaN1 and !(NaN <= NaN1) and !(NaN1 <= NaN));
    {
        local a = {};
        assert(!pcall(rawset, a, NaN, 1));
        assert(a[NaN] == nil);
        a[0] = 1;
        assert(!pcall(rawset, a, NaN, 1));
        assert(a[NaN] == nil);
        # strings with same binary representation as 0.0 (might create problems
        # for constant manipulation in the pre-compiler)
        local a1, a2, a3, a4, a5 = 0, 0, "\0\0\0\0\0\0\0\0", 0, "\0\0\0\0\0\0\0\0";
        assert(a1 == a2 and a2 == a4 and a1 != tonum(a3));
        assert(tonum(a3) == tonum(a5));
    }
}
